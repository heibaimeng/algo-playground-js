{
	// Place your algo-playground-js workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"abuf": {
		"scope": "javascript,typescript",
		"prefix": "abuf",
		"body": [
			"let bs = ''",
			"process.stdin.on('data', d => bs += d)",
			"process.stdin.on('end', () => run(bs))"
		],
		"description": "读取输入流"
	},
	"arun": {
		"scope": "javascript,typescript",
		"prefix": "arun",
		"body": [
			"function run(bstr) {",
			"  let buf = bstr.trim().split('\\n')",
			"  let [n] = buf[0].split(' ').map(x => +x)",
			"  $1",
			"}"
		],
		"description": "主函数"
	},
	"aarr": {
		"scope": "javascript,typescript",
		"prefix": "aarr",
		"body": [
			"Array.from({length: n}, () => $1)$2"
		],
		"description": "创建指定长度的数组"
	},
	"asplit": {
		"scope": "javascript,typescript",
		"prefix": "asplit",
		"body": [
			"split(' ').map(x => +x)"
		],
		"description": "字符串分割为数值数组"
	},
	"aslice": {
		"scope": "javascript,typescript",
		"prefix": "aslice",
		"body": [
			"buf.slice(1).forEach(c => {$1})"
		],
		"description": "从 1 行起遍历剩余行"
	},
	"swap": {
		"scope": "javascript,typescript",
		"prefix": "swap",
		"body": [
			"function swap(a, i, j) {",
			"  let t = a[i]",
			"  a[i] = a[j]",
			"  a[j] = t",
			"}"
		],
		"description": "交换数组元素"
	},
	"PriorityQueue": {
		"scope": "javascript,typescript",
		"prefix": "PriorityQueue",
		"body": [
			"class PriorityQueue {",
			"  constructor({ compare }) {",
			"    this.compare = compare",
			"    this.heap = [0]",
			"    this.len = 0",
			"  }",
			"  down(u) {",
			"    let t = u",
			"    if (u * 2 <= this.len && this.compare(this.heap[u * 2], this.heap[t]) < 0) t = u * 2",
			"    if (u * 2 + 1 <= this.len && this.compare(this.heap[u * 2 + 1], this.heap[t]) < 0) t = u * 2 + 1",
			"    if (t !== u) {",
			"      [this.heap[t], this.heap[u]] = [this.heap[u], this.heap[t]]",
			"      this.down(t)",
			"    }",
			"  }",
			"  up (u) {",
			"    while (u >> 1 && this.compare(this.heap[u], this.heap[u >> 1]) < 0) {",
			"        [this.heap[u], this.heap[u >> 1]] = [this.heap[u >> 1], this.heap[u]]",
			"        u = u >> 1",
			"    }",
			"  }",
			"  enqueue(x) {",
			"    this.len++",
			"    this.heap[this.len] = x;",
			"    this.up(this.len);",
			"  }",
			"  dequeue() {",
			"    let t = this.heap[1]",
			"    this.heap[1] = this.heap[this.len];",
			"    this.len--;",
			"    this.down(1);",
			"    return t",
			"  }",
			"  clear(){",
			"    this.len = 0",
			"    this.heap = [0]",
			"  }",
			"  size() {",
			"    return this.len",
			"  }",
			"  front() {",
			"    return this.heap[1]",
			"  }",
			"}"
		],
		"description": "优先队列"
	}
}